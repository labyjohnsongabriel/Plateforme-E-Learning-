// src/jobs/certificateJob.ts (version simplifi√©e)
import cron from 'node-cron';
import Progression from '../models/learning/Progression';
import CertificatService from '../services/learning/CertificationService';
import logger from '../utils/logger';

// Daily job to check for completed progressions without certificates
cron.schedule('0 0 * * *', async () => {
  try {
    logger.info('üöÄ D√©marrage du job de v√©rification des certificats...');
    
    // R√©cup√©rer les progressions compl√©t√©es
    const completedProgressions = await Progression.find({ 
      pourcentage: 100, 
      dateFin: { $exists: true, $ne: null } 
    })
    .populate('apprenant')
    .populate('cours');

    logger.info(`üìä ${completedProgressions.length} progressions compl√©t√©es trouv√©es`);

    let successCount = 0;
    let errorCount = 0;

    // Traiter chaque progression
    for (const progression of completedProgressions) {
      try {
        // CORRECTION : Utilisation directe sans conversion
        const cert = await CertificatService.generateIfEligible(progression);
        if (cert) {
          successCount++;
          logger.info(`‚úÖ Certificat g√©n√©r√© pour l'apprenant ${progression.apprenant}`);
        }
      } catch (error) {
        errorCount++;
        const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
        logger.error(`‚ùå Erreur avec progression ${progression._id}: ${errorMessage}`);
      }
    }

    logger.info(`üéØ Job termin√©: ${successCount} certificats g√©n√©r√©s, ${errorCount} erreurs`);
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    logger.error('üí• Erreur critique dans le job de certificats:', errorMessage);
  }
}, {
  timezone: 'Africa/Abidjan'
});

logger.info('‚è∞ Job de certificats programm√© pour s\'ex√©cuter quotidiennement √† minuit');

export default cron;